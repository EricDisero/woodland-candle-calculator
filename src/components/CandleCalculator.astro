---
// Candle Calculator Component
---

<div class="min-h-screen py-8 px-4">
  <div class="max-w-6xl mx-auto">
    <!-- Header -->
    <div class="text-center mb-12">
      <h1 class="text-xl lg:text-3xl font-black text-black tracking-wide">Recipe Calculator</h1>
    </div>

    <div class="grid lg:grid-cols-2 gap-8">
      <!-- Input Section -->
      <div class="bg-white/70 backdrop-blur-sm rounded-2xl shadow-xl border border-white/50 p-8">
        <h2 class="text-2xl font-semibold text-gray-800 mb-6 flex items-center gap-2">
          <svg class="w-6 h-6 text-[#a5b79b]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z"></path>
          </svg>
          Input Details
        </h2>

        <div class="space-y-6">
          <!-- Primary Input: Number of Candles -->
          <div class="bg-gradient-to-r from-[#a5b79b]/20 to-[#7a9173]/20 rounded-xl p-6 border-2 border-[#a5b79b]/30">
            <h3 class="text-xl font-semibold text-gray-800 mb-4 flex items-center gap-2">
              <svg class="w-6 h-6 text-[#a5b79b]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a2 2 0 012-2z"></path>
              </svg>
              How many candles do you want to make?
            </h3>
            <div class="flex items-center gap-3">
              <input 
                type="number" 
                id="totalCandles"
                value="8"
                min="1"
                class="flex-1 px-4 py-4 text-2xl font-bold border-2 border-[#a5b79b] rounded-xl focus:ring-2 focus:ring-[#a5b79b] focus:border-transparent transition-all duration-200 bg-white text-center"
                placeholder="Enter number"
              />
            </div>
            <div id="jugBreakdown" class="mt-4 p-4 bg-white/60 rounded-lg">
              <div class="text-sm text-gray-600 font-medium" id="jugCalculation">
                1 full jug (8 candles)
              </div>
            </div>
          </div>

          <!-- Container Type and Quantity -->
          <div class="grid grid-cols-2 gap-4">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">
                Container Type
                <span class="tooltip-trigger inline-flex items-center justify-center w-4 h-4 ml-1 text-xs bg-gray-300 text-gray-600 rounded-full cursor-help" data-tooltip="Jug makes 8 candles (1880g), 8oz jar is individual (235g)">?</span>
              </label>
              <select 
                id="containerType"
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#a5b79b] focus:border-transparent transition-all duration-200 bg-white/50"
              >
                <option value="jug">Jug (8 candles)</option>
                <option value="jar">8oz Jar (individual)</option>
              </select>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">
                Quantity
                <span class="tooltip-trigger inline-flex items-center justify-center w-4 h-4 ml-1 text-xs bg-gray-300 text-gray-600 rounded-full cursor-help" data-tooltip="Number of jugs or individual jars to make">?</span>
              </label>
              <input 
                type="number" 
                id="containerQuantity"
                value="1"
                min="1"
                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#a5b79b] focus:border-transparent transition-all duration-200 bg-white/50"
                placeholder="1"
              />
            </div>
          </div>

          <!-- Total Water Capacity Display -->
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">
              Total Water Capacity
              <span class="tooltip-trigger inline-flex items-center justify-center w-4 h-4 ml-1 text-xs bg-gray-300 text-gray-600 rounded-full cursor-help" data-tooltip="Automatically calculated based on container type and quantity">?</span>
            </label>
            <div class="w-full px-4 py-3 border border-gray-300 rounded-lg bg-gray-50 text-gray-700 font-medium">
              <span id="totalWaterCapacity">1880g</span>
              <span id="containerInfo" class="text-sm text-gray-500 ml-2">(1 jug = 8 candles)</span>
            </div>
          </div>

          <!-- Wax Type Selection -->
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">
              Wax Type
              <span class="tooltip-trigger inline-flex items-center justify-center w-4 h-4 ml-1 text-xs bg-gray-300 text-gray-600 rounded-full cursor-help" data-tooltip="Select your wax type for automatic gravity and temperature settings">?</span>
            </label>
            <select 
              id="waxType"
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#a5b79b] focus:border-transparent transition-all duration-200 bg-white/50"
            >
              <option value="464">464 Soy Wax (Default)</option>
              <option value="coconut">Coconut Wax</option>
              <option value="beeswax">Beeswax</option>
              <option value="paraffin">Paraffin Wax</option>
              <option value="custom">Custom</option>
            </select>
          </div>

          <!-- Wax Gravity -->
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">
              Wax Gravity
              <span class="tooltip-trigger inline-flex items-center justify-center w-4 h-4 ml-1 text-xs bg-gray-300 text-gray-600 rounded-full cursor-help" data-tooltip="Weight of wax divided by the weight of water">?</span>
            </label>
            <input 
              type="number" 
              id="waxGravity"
              value="0.92"
              step="0.01"
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#a5b79b] focus:border-transparent transition-all duration-200 bg-white/50"
              placeholder="0.92"
            />
          </div>

          <!-- Scent Load -->
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">
              Scent Load (%)
              <span class="tooltip-trigger inline-flex items-center justify-center w-4 h-4 ml-1 text-xs bg-gray-300 text-gray-600 rounded-full cursor-help" data-tooltip="How smelly do you want the candles?">?</span>
            </label>
            <input 
              type="number" 
              id="scentLoad"
              value="8"
              max="100"
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#a5b79b] focus:border-transparent transition-all duration-200 bg-white/50"
              placeholder="8"
            />
          </div>

          <!-- Recipe Presets -->
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">
              Sarah's Recipe Presets
              <span class="tooltip-trigger inline-flex items-center justify-center w-4 h-4 ml-1 text-xs bg-gray-300 text-gray-600 rounded-full cursor-help" data-tooltip="Load one of Sarah's signature woodland candle recipes">?</span>
            </label>
            <select 
              id="recipePresets"
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#a5b79b] focus:border-transparent transition-all duration-200 bg-white/50"
            >
              <option value="">Select a preset recipe...</option>
              <option value="log-cabin">Log Cabin</option>
              <option value="old-growth">Old Growth</option>
              <option value="in-the-pines">In The Pines</option>
              <option value="douglas-fir">Douglas Fir</option>
              <option value="arbutus">Arbutus</option>
            </select>
          </div>

          <!-- Fragrance Recipe -->
          <div>
            <h3 class="text-lg font-medium text-gray-800 mb-4">Fragrance Recipe</h3>
            <div id="fragranceInputs" class="space-y-4">
              <div class="fragrance-input flex gap-3 items-end">
                <div class="flex-1">
                  <label class="block text-sm font-medium text-gray-700 mb-2">Fragrance Oil 1 (%)</label>
                  <input 
                    type="number" 
                    class="fragrance-percentage w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#a5b79b] focus:border-transparent transition-all duration-200 bg-white/50"
                    max="100"
                    placeholder="0"
                  />
                </div>
                <div class="flex-1">
                  <label class="block text-sm font-medium text-gray-700 mb-2">Name (optional)</label>
                  <input 
                    type="text" 
                    class="fragrance-name w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#a5b79b] focus:border-transparent transition-all duration-200 bg-white/50"
                    placeholder="Vanilla"
                  />
                </div>
                <button type="button" class="remove-fragrance p-2 text-red-500 hover:bg-red-50 rounded-lg transition-colors duration-200 hidden">
                  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                  </svg>
                </button>
              </div>
            </div>
            
            <button 
              type="button" 
              id="addFragrance"
              class="mt-4 flex items-center gap-2 px-4 py-2 text-[#a5b79b] hover:bg-[#a5b79b] hover:text-white border border-[#a5b79b] rounded-lg transition-all duration-200"
            >
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
              </svg>
              Add Fragrance Oil
            </button>

            <div id="totalPercentage" class="mt-4 p-3 rounded-lg bg-gray-50 text-sm">
              <span class="font-medium">Total Percentage: </span>
              <span id="totalPercent">0</span>%
              <span id="percentageWarning" class="text-red-600 ml-2 hidden">⚠️ Total should equal 100%</span>
            </div>
          </div>

          <button 
            type="button" 
            id="calculateBtn"
            class="w-full bg-[#a5b79b] hover:bg-[#7a9173] text-white font-bold py-5 px-8 rounded-xl transition-all duration-300 shadow-xl hover:shadow-2xl transform hover:-translate-y-1 active:scale-95"
          >
            <span class="text-lg font-bold text-white tracking-wide text-center">Calculate Recipe</span>
          </button>
        </div>
      </div>

      <!-- Results Section -->
      <div class="bg-white/70 backdrop-blur-sm rounded-2xl shadow-xl border border-white/50 p-8">
        <h2 class="text-2xl font-semibold text-gray-800 mb-6 flex items-center gap-2">
          <svg class="w-6 h-6 text-[#a5b79b]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
          </svg>
          Calculated Weights
        </h2>

        <div id="resultsContainer" class="space-y-4">
          <div class="text-center py-12 text-gray-500">
            <svg class="w-16 h-16 mx-auto mb-4 text-gray-300" fill="currentColor" viewBox="0 0 24 24">
              <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-1 17.93c-3.94-.49-7-3.85-7-7.93s3.05-7.44 7-7.93v15.86zm2-15.86c3.94.49 7 3.85 7 7.93s-3.05 7.44-7 7.93V4.07z"/>
            </svg>
            <p class="text-lg">Complete the form to see your results</p>
            <p class="text-sm mt-2">Enter your jar capacity, wax gravity, scent load, and fragrance percentages</p>
          </div>
        </div>
      </div>
    </div>

    <!-- Footer -->
    <div class="text-center mt-12 text-gray-600">
      <p class="text-sm">
        Input jar/melting pot capacity, wax gravity, scent load, and oil percentages. The calculator will determine accurate wax and oil weights for your candles.
      </p>
      <p class="text-xs mt-2 text-gray-500">
        Ensure total oil percentages equal 100% for best results.
      </p>
    </div>
  </div>
</div>

<script>
  let fragranceCount = 1;
  
  // Wax type data with properties
  interface WaxData {
    gravity: number;
    meltTemp: number;
    mixTemp: number;
    pourTemp: number;
  }

  interface FragranceData {
    name: string;
    percentage: number;
    weight?: number;
  }

  interface RecipePreset {
    name: string;
    fragrances: FragranceData[];
  }

  const waxTypes: Record<string, WaxData> = {
    '464': { gravity: 0.92, meltTemp: 185, mixTemp: 155, pourTemp: 135 },
    'coconut': { gravity: 0.94, meltTemp: 175, mixTemp: 180, pourTemp: 145 },
    'beeswax': { gravity: 0.96, meltTemp: 145, mixTemp: 150, pourTemp: 140 },
    'paraffin': { gravity: 0.90, meltTemp: 140, mixTemp: 145, pourTemp: 135 },
    'custom': { gravity: 0.92, meltTemp: 185, mixTemp: 155, pourTemp: 135 }
  };

  // Container types with their water capacities
  const containerTypes: Record<string, { waterCapacity: number; description: string }> = {
    'jug': { waterCapacity: 1880, description: 'jug = 8 candles' },
    'jar': { waterCapacity: 235, description: '8oz jar' }
  };

  // Recipe presets
  const recipePresets: Record<string, RecipePreset> = {
    'log-cabin': {
      name: 'Log Cabin',
      fragrances: [
        { name: 'Cozy Cabin FO', percentage: 55 },
        { name: 'Cedarwood Virginia EO', percentage: 40 },
        { name: 'Firewood FO', percentage: 5 }
      ]
    },
    'old-growth': {
      name: 'Old Growth',
      fragrances: [
        { name: 'Woods & Earth FO', percentage: 40 },
        { name: 'Patchouli EO', percentage: 10 },
        { name: 'Cedarwood Virginia EO', percentage: 30 },
        { name: 'Fir Balsam EO', percentage: 20 }
      ]
    },
    'in-the-pines': {
      name: 'In The Pines',
      fragrances: [
        { name: 'Evergreen FO', percentage: 50 },
        { name: 'Pine Scotch EO', percentage: 50 }
      ]
    },
    'douglas-fir': {
      name: 'Douglas Fir',
      fragrances: [
        { name: 'Cedarwood Virginia EO', percentage: 24 },
        { name: 'Balsam Fir FO', percentage: 40 },
        { name: 'Fir Needle EO', percentage: 36 }
      ]
    },
    'arbutus': {
      name: 'Arbutus',
      fragrances: [
        { name: 'Cedarwood Virginia EO', percentage: 20 },
        { name: 'Bourbon Sandalwood FO', percentage: 80 }
      ]
    }
  };

  function updateJugBreakdown(): void {
    const totalCandles = parseInt((document.getElementById('totalCandles') as HTMLInputElement)?.value) || 8;
    const fullJugs = Math.floor(totalCandles / 8);
    const partialCandles = totalCandles % 8;
    
    const jugCalculation = document.getElementById('jugCalculation');
    if (jugCalculation) {
      let breakdown = '';
      
      if (fullJugs > 0) {
        breakdown += `${fullJugs} full ${fullJugs === 1 ? 'jug' : 'jugs'} (${fullJugs * 8} candles)`;
      }
      
      if (partialCandles > 0) {
        if (fullJugs > 0) {
          breakdown += ` + `;
        }
        breakdown += `1 partial jug (${partialCandles} candles)`;
      }
      
      if (totalCandles === 0) {
        breakdown = 'Enter number of candles above';
      }
      
      jugCalculation.textContent = breakdown;
    }
    
    // Update the container quantity to match the calculated total jugs needed
    const containerQuantityInput = document.getElementById('containerQuantity') as HTMLInputElement;
    if (containerQuantityInput) {
      const totalJugs = fullJugs + (partialCandles > 0 ? 1 : 0);
      containerQuantityInput.value = totalJugs.toString();
      updateWaterCapacity();
    }
  }

  function updateWaxProperties(): void {
    const waxType = (document.getElementById('waxType') as HTMLSelectElement)?.value || '464';
    const waxGravityInput = document.getElementById('waxGravity') as HTMLInputElement;
    
    if (waxGravityInput && waxTypes[waxType]) {
      waxGravityInput.value = waxTypes[waxType].gravity.toString();
    }
    
    // Auto-calculate when wax type changes
    calculateRecipe();
  }

  function loadRecipePreset(): void {
    const presetValue = (document.getElementById('recipePresets') as HTMLSelectElement)?.value;
    if (!presetValue || !recipePresets[presetValue]) return;

    const preset = recipePresets[presetValue];
    const container = document.getElementById('fragranceInputs');
    if (!container) return;

    // Clear existing inputs
    container.innerHTML = '';
    fragranceCount = 0;

    // Add preset fragrances
    preset.fragrances.forEach((fragrance: FragranceData) => {
      addFragranceInput(fragrance.name, fragrance.percentage.toString());
    });

    updateTotalPercentage();
    // Auto-calculate when preset is loaded
    calculateRecipe();
  }

  function updateWaterCapacity(): void {
    const containerType = (document.getElementById('containerType') as HTMLSelectElement)?.value || 'jug';
    const quantity = parseInt((document.getElementById('containerQuantity') as HTMLInputElement)?.value) || 1;
    
    const containerData = containerTypes[containerType];
    const totalCapacity = containerData.waterCapacity * quantity;
    
    const capacityDisplay = document.getElementById('totalWaterCapacity');
    const infoDisplay = document.getElementById('containerInfo');
    
    if (capacityDisplay) {
      capacityDisplay.textContent = `${totalCapacity}g`;
    }
    
    if (infoDisplay) {
      if (containerType === 'jug') {
        infoDisplay.textContent = `(${quantity} ${quantity === 1 ? 'jug' : 'jugs'} = ${quantity * 8} candles)`;
      } else {
        infoDisplay.textContent = `(${quantity} ${quantity === 1 ? '8oz jar' : '8oz jars'})`;
      }
    }
    
    // Auto-calculate when capacity changes
    calculateRecipe();
  }

  function updateFragranceNumbers(): void {
    const inputs = document.querySelectorAll('.fragrance-input');
    inputs.forEach((input, index: number) => {
      const label = input.querySelector('label');
      if (label) {
        label.textContent = `Fragrance Oil ${index + 1} (%)`;
      }
      
      // Show/hide remove button
      const removeBtn = input.querySelector('.remove-fragrance');
      if (removeBtn) {
        removeBtn.classList.toggle('hidden', inputs.length <= 1);
      }
    });
  }

  function updateTotalPercentage(): void {
    const percentageInputs = document.querySelectorAll('.fragrance-percentage') as NodeListOf<HTMLInputElement>;
    let total = 0;
    
    percentageInputs.forEach((input: HTMLInputElement) => {
      const value = parseFloat(input.value) || 0;
      total += value;
    });
    
    const totalSpan = document.getElementById('totalPercent');
    const warningSpan = document.getElementById('percentageWarning');
    
    if (totalSpan) {
      totalSpan.textContent = total.toFixed(1);
    }
    
    if (warningSpan) {
      if (total !== 100 && total > 0) {
        warningSpan.classList.remove('hidden');
      } else {
        warningSpan.classList.add('hidden');
      }
    }
    
    // Auto-calculate when percentages change
    calculateRecipe();
  }

  function addFragranceInput(defaultName: string = '', defaultPercentage: string = ''): void {
    fragranceCount++;
    const container = document.getElementById('fragranceInputs');
    if (!container) return;

    const newInput = document.createElement('div');
    newInput.className = 'fragrance-input flex gap-3 items-end';
    newInput.innerHTML = `
      <div class="flex-1">
        <label class="block text-sm font-medium text-gray-700 mb-2">Fragrance Oil ${fragranceCount} (%)</label>
        <input 
          type="number" 
          class="fragrance-percentage w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#a5b79b] focus:border-transparent transition-all duration-200 bg-white/50"
          max="100"
          placeholder="0"
          value="${defaultPercentage}"
        />
      </div>
      <div class="flex-1">
        <label class="block text-sm font-medium text-gray-700 mb-2">Name (optional)</label>
        <input 
          type="text" 
          class="fragrance-name w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#a5b79b] focus:border-transparent transition-all duration-200 bg-white/50"
          placeholder="Essential Oil"
          value="${defaultName}"
        />
      </div>
      <button type="button" class="remove-fragrance p-2 text-red-500 hover:bg-red-50 rounded-lg transition-colors duration-200">
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
        </svg>
      </button>
    `;

    container.appendChild(newInput);
    updateFragranceNumbers();
    
    // Add event listeners to new inputs
    const percentageInput = newInput.querySelector('.fragrance-percentage') as HTMLInputElement;
    const removeBtn = newInput.querySelector('.remove-fragrance') as HTMLButtonElement;
    
    if (percentageInput) {
      percentageInput.addEventListener('input', updateTotalPercentage);
    }
    
    if (removeBtn) {
      removeBtn.addEventListener('click', () => {
        newInput.remove();
        updateFragranceNumbers();
        updateTotalPercentage();
      });
    }
  }

  function calculateRecipe(): void {
    // Calculate total water capacity based on exact candle count
    const totalCandles = parseInt((document.getElementById('totalCandles') as HTMLInputElement)?.value) || 8;
    const containerType = 'jug'; // Always use jug calculations now
    const containerData = containerTypes[containerType];
    
    // Calculate capacity based on exact candle count (each candle = 235g capacity)
    const jarCapacity = totalCandles * 235;
    
    const waxGravity = parseFloat((document.getElementById('waxGravity') as HTMLInputElement)?.value) || 0.92;
    const scentLoad = parseFloat((document.getElementById('scentLoad') as HTMLInputElement)?.value) || 8;
    const waxType = (document.getElementById('waxType') as HTMLSelectElement)?.value || '464';
    
    // Calculate "wax-only fill" - the maximum weight of pure wax that would fill the jar
    const waxFill = jarCapacity * waxGravity;
    
    // Convert scent load percentage to decimal
    const scentLoadDecimal = scentLoad / 100;
    
    // Back-calculate actual wax weight so that wax + fragrance = wax-fill capacity
    // Formula: wax_weight = wax_fill / (1 + scent_load_decimal)
    const waxWeight = waxFill / (1 + scentLoadDecimal);
    
    // Calculate total fragrance weight
    const totalFragranceWeight = waxWeight * scentLoadDecimal;
    
    // Get fragrance percentages
    const fragranceInputs = document.querySelectorAll('.fragrance-input');
    const fragrances: FragranceData[] = [];
    
    fragranceInputs.forEach((input, index: number) => {
      const percentage = parseFloat((input.querySelector('.fragrance-percentage') as HTMLInputElement)?.value) || 0;
      const name = (input.querySelector('.fragrance-name') as HTMLInputElement)?.value || `Fragrance Oil ${index + 1}`;
      
      if (percentage > 0) {
        const weight = (totalFragranceWeight * percentage) / 100;
        fragrances.push({ name, percentage, weight });
      }
    });
    
    // Display results
    displayResults(waxWeight, totalFragranceWeight, fragrances, jarCapacity, waxType, waxFill, containerType, totalCandles);
  }

  function displayResults(waxWeight: number, totalFragranceWeight: number, fragrances: FragranceData[], jarCapacity: number, waxType: string, waxFill: number, containerType: string, totalCandles: number): void {
    const container = document.getElementById('resultsContainer');
    if (!container) return;

    const totalWeight = waxWeight + totalFragranceWeight;
    const waxData = waxTypes[waxType] || waxTypes['464'];
    
    // Calculate jug breakdown
    const fullJugs = Math.floor(totalCandles / 8);
    const partialCandles = totalCandles % 8;
    const totalJugs = fullJugs + (partialCandles > 0 ? 1 : 0);
    
    // Calculate per-jug amounts
    const fullJugWaxWeight = fullJugs > 0 ? (waxWeight / totalCandles) * 8 : 0;
    const fullJugFragranceWeight = fullJugs > 0 ? (totalFragranceWeight / totalCandles) * 8 : 0;
    const partialJugWaxWeight = partialCandles > 0 ? (waxWeight / totalCandles) * partialCandles : 0;
    const partialJugFragranceWeight = partialCandles > 0 ? (totalFragranceWeight / totalCandles) * partialCandles : 0;
    
    container.innerHTML = `
      <div class="space-y-6">
        <!-- Jug Preparation Instructions -->
        <div class="bg-gradient-to-r from-[#a5b79b]/15 to-[#7a9173]/15 rounded-xl p-6 border-2 border-[#a5b79b]/30">
          <h3 class="text-xl font-bold text-gray-800 mb-4 flex items-center gap-2">
            <svg class="w-6 h-6 text-[#a5b79b]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4"></path>
            </svg>
            Jug Preparation for ${totalCandles} Candles
          </h3>
          <div class="space-y-3">
            ${fullJugs > 0 ? `
              <div class="bg-white/60 rounded-lg p-4">
                <div class="font-semibold text-gray-800 mb-2">Prep ${fullJugs} Full ${fullJugs === 1 ? 'Jug' : 'Jugs'} (${fullJugs * 8} candles)</div>
                <div class="flex items-center gap-4">
                  <div class="bg-[#a5b79b]/20 px-4 py-2 rounded-lg border-2 border-[#a5b79b]">
                    <div class="text-2xl font-bold text-[#a5b79b]">${fullJugWaxWeight.toFixed(1)}g</div>
                    <div class="text-xs text-gray-600 font-medium">wax per jug</div>
                  </div>
                  <div class="text-lg text-gray-600">+</div>
                  <div class="bg-[#7a9173]/20 px-4 py-2 rounded-lg border border-[#7a9173]">
                    <div class="text-lg font-bold text-[#7a9173]">${fullJugFragranceWeight.toFixed(1)}g</div>
                    <div class="text-xs text-gray-600 font-medium">fragrance per jug</div>
                  </div>
                </div>
              </div>
            ` : ''}
            ${partialCandles > 0 ? `
              <div class="bg-white/60 rounded-lg p-4">
                <div class="font-semibold text-gray-800 mb-2">Prep 1 Partial Jug (${partialCandles} candles)</div>
                <div class="flex items-center gap-4">
                  <div class="bg-[#a5b79b]/20 px-4 py-2 rounded-lg border-2 border-[#a5b79b]">
                    <div class="text-2xl font-bold text-[#a5b79b]">${partialJugWaxWeight.toFixed(1)}g</div>
                    <div class="text-xs text-gray-600 font-medium">wax for partial jug</div>
                  </div>
                  <div class="text-lg text-gray-600">+</div>
                  <div class="bg-[#7a9173]/20 px-4 py-2 rounded-lg border border-[#7a9173]">
                    <div class="text-lg font-bold text-[#7a9173]">${partialJugFragranceWeight.toFixed(1)}g</div>
                    <div class="text-xs text-gray-600 font-medium">fragrance for partial jug</div>
                  </div>
                </div>
              </div>
            ` : ''}
          </div>
        </div>

        <!-- Main Recipe Amounts -->
        <div class="bg-gradient-to-r from-[#a5b79b]/10 to-[#7a9173]/10 rounded-xl p-6 border border-[#a5b79b]/20">
          <h3 class="text-lg font-semibold text-gray-800 mb-4">Total Recipe Amounts</h3>
          <div class="grid grid-cols-2 gap-4">
            <div class="text-center">
              <div class="text-3xl font-bold text-[#a5b79b]">${waxWeight.toFixed(1)}g</div>
              <div class="text-sm font-medium text-gray-700">Total Wax Weight</div>
            </div>
            <div class="text-center">
              <div class="text-3xl font-bold text-[#7a9173]">${totalFragranceWeight.toFixed(1)}g</div>
              <div class="text-sm font-medium text-gray-700">Total Fragrance Weight</div>
            </div>
          </div>
          <div class="mt-4 pt-4 border-t border-gray-200 text-center">
            <div class="text-lg font-semibold text-gray-800">${totalWeight.toFixed(1)}g</div>
            <div class="text-sm text-gray-600">Total Recipe Weight</div>
            <div class="text-xs text-gray-500 mt-1">For ${totalCandles} candles (${waxFill.toFixed(1)}g capacity)</div>
          </div>
        </div>

        <!-- Individual Jug Fragrance Weights -->
        ${fragrances.length > 0 ? `
          <div class="bg-white/70 rounded-xl p-6 border border-gray-200">
            <h3 class="text-lg font-bold text-gray-800 mb-4 flex items-center gap-2">
              <svg class="w-6 h-6 text-[#7a9173]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19.428 15.428a2 2 0 00-1.022-.547l-2.387-.477a6 6 0 00-3.86.517l-.318.158a6 6 0 01-3.86.517L6.05 15.21a2 2 0 00-1.806.547M8 4h8l-1 1v5.172a2 2 0 00.586 1.414l5 5c1.26 1.26.367 3.414-1.415 3.414H4.828c-1.782 0-2.674-2.154-1.414-3.414l5-5A2 2 0 009 10.172V5L8 4z"></path>
              </svg>
              Individual Jug Fragrance Weights
            </h3>
            
            ${fullJugs > 0 ? `
              <div class="mb-6">
                <h4 class="font-semibold text-gray-800 mb-3">Per Full Jug (8 candles each)</h4>
                <div class="space-y-2">
                  ${fragrances.map((fragrance: FragranceData, index: number) => {
                    const perFullJugWeight = (fragrance.weight! / totalCandles) * 8;
                    return `
                      <div class="bg-gradient-to-r from-[#7a9173]/10 to-[#a5b79b]/10 rounded-lg p-3 border border-[#7a9173]/20 flex justify-between items-center">
                        <div>
                          <div class="font-bold text-gray-800">${fragrance.name}</div>
                          <div class="text-xs text-gray-600">${fragrance.percentage}% of fragrance mix</div>
                        </div>
                        <div class="text-right">
                          <div class="text-xl font-bold text-[#7a9173]">${perFullJugWeight.toFixed(2)}g</div>
                          <div class="text-xs text-gray-500">per full jug</div>
                        </div>
                      </div>
                    `;
                  }).join('')}
                </div>
              </div>
            ` : ''}
            
            ${partialCandles > 0 ? `
              <div>
                <h4 class="font-semibold text-gray-800 mb-3">For Partial Jug (${partialCandles} candles)</h4>
                <div class="space-y-2">
                  ${fragrances.map((fragrance: FragranceData, index: number) => {
                    const perPartialJugWeight = (fragrance.weight! / totalCandles) * partialCandles;
                    return `
                      <div class="bg-gradient-to-r from-[#a5b79b]/10 to-[#7a9173]/10 rounded-lg p-3 border border-[#a5b79b]/20 flex justify-between items-center">
                        <div>
                          <div class="font-bold text-gray-800">${fragrance.name}</div>
                          <div class="text-xs text-gray-600">${fragrance.percentage}% of fragrance mix</div>
                        </div>
                        <div class="text-right">
                          <div class="text-xl font-bold text-[#a5b79b]">${perPartialJugWeight.toFixed(2)}g</div>
                          <div class="text-xs text-gray-500">for partial jug</div>
                        </div>
                      </div>
                    `;
                  }).join('')}
                </div>
              </div>
            ` : ''}
          </div>
        ` : ''}

        <!-- Temperature Guidelines -->
        <div class="bg-amber-50 rounded-xl p-6 border border-amber-200">
          <h3 class="text-lg font-semibold text-amber-800 mb-4">Temperature Guidelines</h3>
          <div class="grid grid-cols-3 gap-4">
            <div class="text-center">
              <div class="text-xl font-bold text-amber-700">${waxData.meltTemp}°F</div>
              <div class="text-sm text-amber-600">Melting</div>
            </div>
            <div class="text-center">
              <div class="text-xl font-bold text-amber-700">${waxData.mixTemp}°F</div>
              <div class="text-sm text-amber-600">Mixing</div>
            </div>
            <div class="text-center">
              <div class="text-xl font-bold text-amber-700">${waxData.pourTemp}°F</div>
              <div class="text-sm text-amber-600">Pouring</div>
            </div>
          </div>
        </div>

        <!-- Sarah's Jug-by-Jug Instructions -->
        <div class="bg-blue-50 rounded-lg p-6 border border-blue-200">
          <h3 class="text-lg font-semibold text-blue-800 mb-4 flex items-center gap-2">
            <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
            </svg>
            Sarah's Jug-by-Jug Instructions
          </h3>
          <div class="space-y-4">
            <div class="bg-white/60 rounded-lg p-4">
              <h4 class="font-semibold text-blue-800 mb-2">Setup</h4>
              <div class="text-sm text-blue-700 space-y-1">
                <div>• Melt wax in wax melter to ${waxData.meltTemp}°F</div>
                <div>• You'll be making each jug individually</div>
              </div>
            </div>
            
            ${fullJugs > 0 ? `
              <div class="bg-white/60 rounded-lg p-4">
                <h4 class="font-semibold text-blue-800 mb-2">For Each Full Jug (${fullJugs} ${fullJugs === 1 ? 'jug' : 'jugs'} total - 8 candles each)</h4>
                <div class="text-sm text-blue-700 space-y-1">
                  <div><strong>Per jug fragrance mix:</strong></div>
                  <ul class="ml-4 mt-1 space-y-0.5 list-disc list-inside">
                    ${fragrances.map((f: FragranceData) => {
                      const perFullJugWeight = (f.weight! / totalCandles) * 8;
                      return `<li><strong>${perFullJugWeight.toFixed(2)}g</strong> of ${f.name}</li>`;
                    }).join('')}
                  </ul>
                  <div class="mt-2 space-y-1">
                    <div>• Mix these fragrances together in a separate container</div>
                    <div>• Measure <strong>${fullJugWaxWeight.toFixed(1)}g</strong> of melted wax into mixing pitcher</div>
                    <div>• Wait for pitcher to reach ${waxData.mixTemp}°F</div>
                    <div>• Add fragrance mixture (${fullJugFragranceWeight.toFixed(1)}g total) to pitcher</div>
                    <div>• Mix oils into wax very well (2-3 minutes)</div>
                    <div>• Wait for pitcher to cool to ${waxData.pourTemp}°F</div>
                    <div>• Transfer to wax dispenser and pour 8 candles</div>
                    <div>• Repeat for each full jug</div>
                  </div>
                </div>
              </div>
            ` : ''}
            
            ${partialCandles > 0 ? `
              <div class="bg-white/60 rounded-lg p-4">
                <h4 class="font-semibold text-blue-800 mb-2">For Partial Jug (${partialCandles} candles)</h4>
                <div class="text-sm text-blue-700 space-y-1">
                  <div><strong>Partial jug fragrance mix:</strong></div>
                  <ul class="ml-4 mt-1 space-y-0.5 list-disc list-inside">
                    ${fragrances.map((f: FragranceData) => {
                      const perPartialJugWeight = (f.weight! / totalCandles) * partialCandles;
                      return `<li><strong>${perPartialJugWeight.toFixed(2)}g</strong> of ${f.name}</li>`;
                    }).join('')}
                  </ul>
                  <div class="mt-2 space-y-1">
                    <div>• Mix these fragrances together in a separate container</div>
                    <div>• Measure <strong>${partialJugWaxWeight.toFixed(1)}g</strong> of melted wax into mixing pitcher</div>
                    <div>• Wait for pitcher to reach ${waxData.mixTemp}°F</div>
                    <div>• Add fragrance mixture (${partialJugFragranceWeight.toFixed(1)}g total) to pitcher</div>
                    <div>• Mix oils into wax very well (2-3 minutes)</div>
                    <div>• Wait for pitcher to cool to ${waxData.pourTemp}°F</div>
                    <div>• Transfer to wax dispenser and pour ${partialCandles} candles</div>
                  </div>
                </div>
              </div>
            ` : ''}
            
            <div class="bg-white/60 rounded-lg p-4">
              <h4 class="font-semibold text-blue-800 mb-2">Final Step</h4>
              <div class="text-sm text-blue-700">
                <div>• Allow all ${totalCandles} candles to cure for 24-48 hours</div>
              </div>
            </div>
          </div>
        </div>
      </div>
    `;
  }

  // Initialize event listeners
  document.addEventListener('DOMContentLoaded', () => {
    const addBtn = document.getElementById('addFragrance') as HTMLButtonElement;
    const calculateBtn = document.getElementById('calculateBtn') as HTMLButtonElement;
    const waxTypeSelect = document.getElementById('waxType') as HTMLSelectElement;
    const recipePresetsSelect = document.getElementById('recipePresets') as HTMLSelectElement;
    const containerTypeSelect = document.getElementById('containerType') as HTMLSelectElement;
    const containerQuantityInput = document.getElementById('containerQuantity') as HTMLInputElement;
    const waxGravityInput = document.getElementById('waxGravity') as HTMLInputElement;
    const scentLoadInput = document.getElementById('scentLoad') as HTMLInputElement;
    const totalCandlesInput = document.getElementById('totalCandles') as HTMLInputElement;
    const initialPercentageInput = document.querySelector('.fragrance-percentage') as HTMLInputElement;
    const initialRemoveBtn = document.querySelector('.remove-fragrance') as HTMLButtonElement;

    if (addBtn) {
      addBtn.addEventListener('click', () => addFragranceInput());
    }

    if (calculateBtn) {
      calculateBtn.addEventListener('click', calculateRecipe);
    }

    if (waxTypeSelect) {
      waxTypeSelect.addEventListener('change', updateWaxProperties);
    }

    if (recipePresetsSelect) {
      recipePresetsSelect.addEventListener('change', loadRecipePreset);
    }

    // Add event listeners for container type and quantity
    if (containerTypeSelect) {
      containerTypeSelect.addEventListener('change', updateWaterCapacity);
    }

    if (containerQuantityInput) {
      containerQuantityInput.addEventListener('input', updateWaterCapacity);
    }

    // Add auto-calculation on input changes
    if (waxGravityInput) {
      waxGravityInput.addEventListener('input', calculateRecipe);
    }

    if (scentLoadInput) {
      scentLoadInput.addEventListener('input', calculateRecipe);
    }

    if (totalCandlesInput) {
      totalCandlesInput.addEventListener('input', () => {
        updateJugBreakdown();
        calculateRecipe();
      });
    }

    if (initialPercentageInput) {
      initialPercentageInput.addEventListener('input', updateTotalPercentage);
    }

    if (initialRemoveBtn) {
      initialRemoveBtn.addEventListener('click', (e) => {
        const target = e.target as HTMLElement;
        target.closest('.fragrance-input')?.remove();
        updateFragranceNumbers();
        updateTotalPercentage();
      });
    }

    // Add event listeners for all percentage inputs
    document.addEventListener('input', (e) => {
      const target = e.target as HTMLElement;
      if (target.classList.contains('fragrance-percentage')) {
        updateTotalPercentage();
      }
    });

    updateFragranceNumbers();
    updateWaxProperties();
    updateJugBreakdown(); // Initialize jug breakdown display
    updateWaterCapacity(); // Initialize water capacity display
    
    // Initialize mobile-friendly tooltips
    initializeTooltips();
  });

  // Mobile-friendly tooltip system
  function initializeTooltips(): void {
    const tooltipTriggers = document.querySelectorAll('.tooltip-trigger');
    let activeTooltip: HTMLElement | null = null;

    tooltipTriggers.forEach((trigger) => {
      const tooltipText = trigger.getAttribute('data-tooltip');
      if (!tooltipText) return;

      // Create tooltip element
      const tooltip = document.createElement('div');
      tooltip.className = 'tooltip-popup absolute z-50 bg-gray-800 text-white text-xs rounded px-2 py-1 max-w-xs hidden';
      tooltip.textContent = tooltipText;
      document.body.appendChild(tooltip);

      // Show tooltip on click/touch (mobile friendly)
      const showTooltip = (e: Event) => {
        e.preventDefault();
        e.stopPropagation();
        
        // Hide any existing tooltip
        if (activeTooltip && activeTooltip !== tooltip) {
          activeTooltip.classList.add('hidden');
        }
        
        const rect = (trigger as HTMLElement).getBoundingClientRect();
        tooltip.style.left = `${rect.left + window.scrollX}px`;
        tooltip.style.top = `${rect.bottom + window.scrollY + 5}px`;
        
        tooltip.classList.toggle('hidden');
        activeTooltip = tooltip.classList.contains('hidden') ? null : tooltip;
      };

      // Hide tooltip when clicking elsewhere
      const hideTooltip = () => {
        tooltip.classList.add('hidden');
        if (activeTooltip === tooltip) {
          activeTooltip = null;
        }
      };

      // Add event listeners for both touch and mouse
      trigger.addEventListener('click', showTooltip);
      trigger.addEventListener('touchstart', showTooltip);
      
      // Hide on hover out for desktop
      trigger.addEventListener('mouseleave', () => {
        setTimeout(hideTooltip, 100);
      });
    });

    // Hide tooltips when clicking elsewhere
    document.addEventListener('click', (e) => {
      if (activeTooltip && !(e.target as HTMLElement)?.closest('.tooltip-trigger')) {
        activeTooltip.classList.add('hidden');
        activeTooltip = null;
      }
    });
  }
</script>

<style>
  .fragrance-input {
    animation: fadeIn 0.3s ease-out;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  input:focus, select:focus {
    box-shadow: 0 0 0 3px rgba(165, 183, 155, 0.1);
  }

  .bg-gradient-to-r {
    background-image: linear-gradient(to right, var(--tw-gradient-stops));
  }
</style> 